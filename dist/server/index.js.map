{"version":3,"file":"index.js","sources":["../../server/index.ts"],"sourcesContent":["import express from 'express';\nimport path from 'path';\nimport fs from 'node:fs/promises';\nimport { fileURLToPath } from 'url';\nimport { createServer as createViteServer } from 'vite';\n\nconst ansi = {\n  space: () => ' ',\n  newLine: () => '\\n',\n  bold: (string: string) => `\\x1b[1m${string}\\x1b[22m`,\n  cyan: (string: string) => `\\x1b[36m${string}\\x1b[0m`,\n  underline: (string: string) => `\\x1b[4m${string}\\x1b[24m`,\n};\n\nconst print = (string: string): void => {\n  process.stdout.write(string);\n};\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url));\nconst port = process.env.PORT || 6969;\n\nconst info: string[] = [\n  ansi.newLine(),\n  ansi.bold('Local:'),\n  ansi.space(),\n  ansi.underline(ansi.cyan(`http://127.0.0.1:${port}`)),\n  ansi.newLine(),\n];\n\nasync function startServer() {\n  const app = express();\n\n  const vite = await createViteServer({\n    server: {\n      middlewareMode: true,\n    },\n    appType: 'custom',\n  });\n\n  app.use(vite.middlewares);\n\n  app.use('*', async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const file = await fs.readFile(path.resolve(dirname, '../index.html'), 'utf-8');\n      const html = await vite.transformIndexHtml(url, file);\n\n      const [beforeOutlet, afterOutlet] = html.split('<!--ssr-outlet-->');\n      res.write(beforeOutlet);\n\n      const { render } = await vite.ssrLoadModule('/src/entry-server.tsx');\n\n      const { stream, injectPreload } = await render(url, {\n        onShellReady() {\n          stream.pipe(res);\n        },\n        onShellError(error: Error) {\n          res.status(500);\n          res.setHeader('Content-type', 'text/html');\n          res.send(`<h1>${error.message}</h1>`);\n        },\n        onAllReady() {\n          const preloaded = afterOutlet.replace('<!--preload-->', injectPreload());\n          res.write(preloaded);\n          res.end();\n        },\n        onError(error: Error) {\n          print(String(error));\n        },\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        vite.ssrFixStacktrace(error);\n      }\n      next(error);\n    }\n  });\n\n  app.listen(port, () => {\n    print(info.join(''));\n  });\n}\n\nstartServer();\n"],"names":["createViteServer"],"mappings":";;;;;AAMA,MAAM,OAAO;AAAA,EACX,OAAO,MAAM;AAAA,EACb,SAAS,MAAM;AAAA,EACf,MAAM,CAAC,WAAmB,UAAU;AAAA,EACpC,MAAM,CAAC,WAAmB,WAAW;AAAA,EACrC,WAAW,CAAC,WAAmB,UAAU;AAC3C;AAEA,MAAM,QAAQ,CAAC,WAAyB;AAC9B,UAAA,OAAO,MAAM,MAAM;AAC7B;AAEA,MAAM,UAAU,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAC3D,MAAM,OAAO,QAAQ,IAAI,QAAQ;AAEjC,MAAM,OAAiB;AAAA,EACrB,KAAK,QAAQ;AAAA,EACb,KAAK,KAAK,QAAQ;AAAA,EAClB,KAAK,MAAM;AAAA,EACX,KAAK,UAAU,KAAK,KAAK,oBAAoB,MAAM,CAAC;AAAA,EACpD,KAAK,QAAQ;AACf;AAEA,eAAe,cAAc;AAC3B,QAAM,MAAM;AAEN,QAAA,OAAO,MAAMA,aAAiB;AAAA,IAClC,QAAQ;AAAA,MACN,gBAAgB;AAAA,IAClB;AAAA,IACA,SAAS;AAAA,EAAA,CACV;AAEG,MAAA,IAAI,KAAK,WAAW;AAExB,MAAI,IAAI,KAAK,OAAO,KAAK,KAAK,SAAS;AACrC,UAAM,MAAM,IAAI;AAEZ,QAAA;AACI,YAAA,OAAO,MAAM,GAAG,SAAS,KAAK,QAAQ,SAAS,eAAe,GAAG,OAAO;AAC9E,YAAM,OAAO,MAAM,KAAK,mBAAmB,KAAK,IAAI;AAEpD,YAAM,CAAC,cAAc,WAAW,IAAI,KAAK,MAAM,mBAAmB;AAClE,UAAI,MAAM,YAAY;AAEtB,YAAM,EAAE,OAAO,IAAI,MAAM,KAAK,cAAc,uBAAuB;AAEnE,YAAM,EAAE,QAAQ,cAAkB,IAAA,MAAM,OAAO,KAAK;AAAA,QAClD,eAAe;AACb,iBAAO,KAAK,GAAG;AAAA,QACjB;AAAA,QACA,aAAa,OAAc;AACzB,cAAI,OAAO,GAAG;AACV,cAAA,UAAU,gBAAgB,WAAW;AACrC,cAAA,KAAK,OAAO,MAAM,cAAc;AAAA,QACtC;AAAA,QACA,aAAa;AACX,gBAAM,YAAY,YAAY,QAAQ,kBAAkB,cAAe,CAAA;AACvE,cAAI,MAAM,SAAS;AACnB,cAAI,IAAI;AAAA,QACV;AAAA,QACA,QAAQ,OAAc;AACd,gBAAA,OAAO,KAAK,CAAC;AAAA,QACrB;AAAA,MAAA,CACD;AAAA,aACM;AACP,UAAI,iBAAiB,OAAO;AAC1B,aAAK,iBAAiB,KAAK;AAAA,MAC7B;AACA,WAAK,KAAK;AAAA,IACZ;AAAA,EAAA,CACD;AAEG,MAAA,OAAO,MAAM,MAAM;AACf,UAAA,KAAK,KAAK,EAAE,CAAC;AAAA,EAAA,CACpB;AACH;AAEA,YAAY;"}